@using System.Web
@using System.Web.Optimization
@model TraceThePathAdmin.Models.RouteDetails


@{
    ViewBag.Title = "SetRoute";
}





<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <title>Navigate and View Your route here</title>
    <link rel="stylesheet" href="~/Scripts/OpenLayers-2.13.1/theme/default/style.css" type="text/css">
    <link rel="stylesheet" href="~/Scripts/OpenLayers-2.13.1/examples/style.css" type="text/css">
    <link rel="stylesheet" href="~/Content/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="~/Content/bootstrap.css" type="text/css">
    <script src="~/Scripts/jquery-1.9.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/OpenLayers-2.13.1/OpenLayers.js"></script>
    <script src="~/Scripts/require.js"></script>

    <link rel="stylesheet" type="text/css" href="~/bootstrappin/stylesheets/theme.css">
    <link rel="stylesheet" type="text/css" href="~/bootstrappin/stylesheets/premium.css">

    <!--<script src="~/App/services/logger.js"></script>-->
</head>

<body class="theme-blue">
    <!-- top navbar -->
    <div class="navbar navbar-default navbar-fixed-top">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="#">Transcurity</a>

        </div>
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav">
                <li class="active"><a href="../home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
                <li><a href="~/ViewRoute/ViewRoute">View Route</a></li>
            </ul>
        </div>

        <!--/.nav-collapse -->
    </div>
    <!--/.navbar -->

    <div class="container">
        <!--<div class="row">-->
        <div class="row-offcanvas row-offcanvas-left">
            <div id="sidebar" class="sidebar-offcanvas">
                <!--1<ul class="nav nav-stacked" id="sidebar" data-toggle="collapse">-->
                <!--2<ul class="nav">-->
                <div class="col-md-12">
                </div>
                <!--/left-->
            </div>
            <div class="col-xs-12 col-sm-9">

                <div class="row ">
                    <div class="col-lg-5">
                        <div class="input-group">
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" id="dropdownRouteMenu1">Select Saved Routes<span class="caret"></span></button>
                                <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownRouteMenuList1">
                                    @foreach (var routeitem in ViewData["RouteInfo"] as List<TraceThePathAdmin.Models.RoutesInfo>)
                                    {
                                        <li id="dropdownRouteMenuList1"><a href="#">@routeitem.routeName-@routeitem.routeid</a></li>
                                    }

                                </ul>
                            </div>
                            <!-- /btn-group -->
                            <input type="text" class="form-control" id="inputRouteName" placeholder="OR Enter a new Route Name  ">
                        </div>
                        <!-- /input-group -->
                    </div>
                    <!-- /.col-lg-6 -->
                    <div class="col-lg-3">
                        <div class="input-group">
                            <button class="btn btn-default dropdown-toggle" type="button" id="dropdownAssetMenu1" data-toggle="dropdown">
                                Assign asset to this route
                                <span class="caret"></span>
                            </button>
                            <ul class="dropdown-menu" role="menu" aria-labelledby="dropdownAssetMenuL1">
                                @foreach (var assetitem in ViewData["AssetInfo"] as List<TraceThePathAdmin.Models.AssetInfo>)
                                {
                                    <li role="presentation" id="dropdownAssetMenuList1"><a role="menuitem" tabindex="-1" href="#">@assetitem.assetName-@assetitem.assetid</a></li>
                                }

                            </ul>
                        </div>
                        <!-- /input-group -->
                    </div>
                    <!-- /.col-lg-6 -->
                    <div class="col-lg-4" id="controls">
                        <div class="input-group">
                            <button type="button" class="btn btn-default" id="noneToggle" value="none" onclick="toggleControl(this);">Navigate</button>
                            <button type="button" class="btn btn-default" id="lineToggle" value="line" onclick="toggleControl(this);">Plot Route</button>
                            <button type="submit" class="btn btn-default" id="createRouteName">Create Route</button>
                            <button type="button" class="btn btn-default" id="clearRoute" value="none" onclick="window.location.reload();">Clear Route</button>
                        </div>
                    </div>
                    <!-- /.row -->

                    <div id="map" class="olMap" style='width: 1300px; height: 700px;'></div>

                </div>
                <!--/right-->
            </div>
            <!--/row-->

        </div>
        <!--/container-->
    </div>
    <script type="text/javascript">

        var assetSelected, routeSelected;
        $(document).on('click', '#dropdownAssetMenuList1', function () {
            var assetSelected = $(this).text();
            $('#dropdownAssetMenu1').html(assetSelected + '<span class="caret"</span>');
        });

        $(document).on('click', '#dropdownRouteMenuList1', function () {
            var routeSelected = $(this).text();
            $('#dropdownRouteMenu1').html(routeSelected + '<span class="caret"</span>');
            var routeNameAndId = routeSelected.split('-', 2);
            var routeIdfromUI = routeNameAndId[1];
            $.ajax({
                url: 'http://sanjayjdm.apphb.com/api/getroutecordinates',
                type: 'GET',
                datatype: "json",
                data: { appKey: 'ttpapikey.asxc123nju89mno0', routeId: routeIdfromUI },
                success: function (result) {
                    var psting = JSON.parse(result);
                    var constantLineString = "LINESTRING(";
                    var inputLineString = "";
                    for (var i = 0; i < psting.cordinates.length; i++) {
                        var startlatt = psting.cordinates[i].startLat;
                        var startlont = psting.cordinates[i].startLon;
                        inputLineString = inputLineString + startlont + " " + startlatt + ",";
                    }
                    var finalStrInput = constantLineString + inputLineString + ")";
                    PlotCoordinatesOnMap(finalStrInput, psting.cordinates[0].startLat, psting.cordinates[0].startLon);
                },
                error: function (x, y, z) {
                    alert('error alert after get location');
                }


            });
        })


        /* activate sidebar */
        $('#sidebar').affix({
            offset: {
                top: 235
            }
        });
        $('.navbar-toggle').on('click', function () {
            if (!$(this).siblings('.navbar-toggle').hasClass('collapsed')) {
                $(this).siblings('.navbar-toggle').click();
            }
        });
        /* activate scrollspy menu */
        var $body = $(document.body);
        var navHeight = $('.navbar').outerHeight(true) + 10;

        $body.scrollspy({
            target: '#leftCol',
            offset: navHeight
        });


        $(document).ready(function () {
            $('[data-toggle=offcanvas]').click(function () {
                $('.row-offcanvas').toggleClass('active');
            });
            LoadMapToSetRoute();
        })

        var controls;
        var routeDetails = {};
        var routeCoordinateList = [];
        var nodes;
        var map, vectors, control, feature;

        function LoadMapToSetRoute() {
            //var mapi, vectors, control, feature;
            map = new OpenLayers.Map('map');
            var osm = new OpenLayers.Layer.OSM("OpenLayers OSM");
            var styleMap = new OpenLayers.StyleMap({
                'default': new OpenLayers.Style({
                    strokeColor: "#F31010",
                    strokeWidth: 2.2,
                    strokeOpacity: 1
                })
            });
            // allow testing of specific renderers via "?renderer=Canvas", etc
            var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
            renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;

            vectors = new OpenLayers.Layer.Vector("Vector Layer", {
                renderers: renderer,
                styleMap: styleMap
            });


            vectors.events.on({
                featuresadded: onFeaturesAdded
            });

            map.addLayers([osm, vectors]);
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            controls = {
                point: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.Point),
                line: new OpenLayers.Control.DrawFeature(vectors,
                            OpenLayers.Handler.Path),


            };

            for (var key in controls) {
                map.addControl(controls[key]);
            }


            var fromProjection = new OpenLayers.Projection("EPSG:4326");   // Transform from WGS 1984
            var toProjection = new OpenLayers.Projection("EPSG:900913"); // to Spherical Mercator Projection
            var position = new OpenLayers.LonLat(77.558498, 12.930096).transform(fromProjection, toProjection);

            map.setCenter(position, 15);
            //mapi.setCenter(new OpenLayers.LonLat(0, 0), 3);

        }
        function PlotCoordinatesOnMap(inputCordinates, centreCordinateLat, centreCordinateLon) {



            // allow testing of specific renderers via "?renderer=Canvas", etc

            var original = OpenLayers.Geometry.fromWKT(inputCordinates);

            vectors.addFeatures([new OpenLayers.Feature.Vector(original)]);
            var maxExtent = vectors.getDataExtent();
            map.setCenter(new OpenLayers.LonLat(centreCordinateLon, centreCordinateLat), 15);
        }

        function onFeaturesAdded(event) {
            nodes = event.features[0].geometry.getVertices();


            for (var i = 0; i < nodes.length; i++) {
                var lon = nodes[i].x;
                var lat = nodes[i].y;


                var routeCoordinates = {};
                routeCoordinates.seqNo = i + 1;
                routeCoordinates.startLat = nodes[i].y;
                routeCoordinates.startLon = nodes[i].x;
                routeCoordinates.endLat = ' 0';
                routeCoordinates.endLon = '0';
                // Do several row data and do some push. In this example is just one push.
                routeCoordinateList.push(routeCoordinates);
            }
            routeDetails.RouteCoordinatesList = routeCoordinateList;
            routeDetails.routeName = document.getElementById("inputRouteName").value;
        }

        function toggleControl(element) {
            for (var key in controls) {
                var control = controls[key];
                if (element.value == key) {
                    control.activate();

                } else {
                    control.deactivate();
                }

            }
        }

        $('#createRouteName').on('click', function (e) {
            var assetNameAndId = document.getElementById("dropdownAssetMenu1").innerText.split('-', 2);
            var assetIdfromUI = assetNameAndId[1];
            alert("assetIdfromUI :" + assetIdfromUI);
            alert(document.getElementById("dropdownRouteMenu1").innerText.trim());
            if (document.getElementById("dropdownRouteMenu1").innerText.trim() == 'Saved Routes') {
                alert('entering if saved routes');
                var routeIdfromUI = 0;
            }
            else {

                var routeNameAndId = document.getElementById("dropdownRouteMenu1").innerText.split('-', 2);
                routeIdfromUI = routeNameAndId[1];
                alert("assetIdfromUI :" + routeIdfromUI);
            }

            var jsonData = JSON.stringify({ routeId: routeIdfromUI, routeName: document.getElementById("inputRouteName").value, assetId: assetIdfromUI, cordinates: routeCoordinateList });
            alert(jsonData);

            $.ajax({
                type: "POST",
                url: "@Url.Action("CreateRoute")",
                data: jsonData,
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    alert("success");
                },
                failure: function (err) { alert(err); }
            });
        })

    </script>
    <style>
        body, html, .row-offcanvas {
            height: 100%;
        }

        body {
            padding-top: 50px;
        }

        #sidebar {
            width: inherit;
            min-width: 220px;
            max-width: 220px;
            background-color: #f5f5f5;
            float: left;
            height: 100%;
            position: relative;
            overflow-y: auto;
            overflow-x: hidden;
        }

        #main {
            height: 100%;
            overflow: auto;
        }

        /*
            * off Canvas sidebar
            * --------------------------------------------------
            */
        @@media screen and (max-width: 9000px) {
            .row-offcanvas {
                position: relative;
                -webkit-transition: all 0.25s ease-out;
                -moz-transition: all 0.25s ease-out;
                transition: all 0.25s ease-out;
                width: calc(100% + 220px);
            }

            .row-offcanvas-left {
                left: -220px;
            }

                .row-offcanvas-left.active {
                    left: 0;
                }

            .sidebar-offcanvas {
                position: absolute;
                top: 0;
            }
        }


        html, body, #map {
            margin: 0;
            width: 100%;
            height: 100%;
        }
        .navbar-default .navbar-brand, .navbar-default .navbar-brand:hover { 
            color: #fff;
        }
    </style>
</body>
